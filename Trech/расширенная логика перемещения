class ImmersiveInterface {
    constructor() {
        this.currentLocation = null;
        this.locations = {
            station: {
                name: "Вокзал Аркхэма",
                bg: "url('locations/station.jpg')",
                paths: ["north_street", "old_well"],
                description: "Поезда больше не ходят. Только тени..."
            },
            north_street: {
                name: "Северный Квартал",
                bg: "url('locations/north_street.jpg')",
                paths: ["station", "asylum"],
                description: "Витрины разбиты, но что-то следит из темноты..."
            }
        };
        
        this.initNavigation();
        this.loadLocation('station');
    }

    loadLocation(locationId) {
        const location = this.locations[locationId];
        
        // Анимация перехода
        const canvas = document.getElementById('locationCanvas');
        canvas.style.opacity = '0';
        
        setTimeout(() => {
            canvas.style.backgroundImage = location.bg;
            canvas.style.opacity = '1';
            this.currentLocation = locationId;
            this.updatePathList(location.paths);
            this.updateDescription(location.description);
        }, 800);
    }

    updatePathList(paths) {
        const container = document.getElementById('pathList');
        container.innerHTML = paths.map(pathId => `
            <button class="path-button" 
                    data-target="${pathId}"
                    onclick="gameInterface.moveTo('${pathId}')">
                ${this.locations[pathId].name}
            </button>
        `).join('');
    }

    updateDescription(text) {
        // Можно добавить эффект печатной машинки
        const descElement = document.createElement('div');
        descElement.className = 'location-description';
        descElement.textContent = text;
        
        document.querySelector('.panel-section.navigation')
            .appendChild(descElement);
    }

    moveTo(locationId) {
        if (this.currentLocation === locationId) return;
        this.loadLocation(locationId);
        // Логика затрат действий и проверок
    }
}

// Инициализация
const gameInterface = new ImmersiveInterface();