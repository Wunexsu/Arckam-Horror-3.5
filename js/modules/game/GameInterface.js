import { cardTemplates } from '../cards/templates/cardTemplates.js';
import { locations } from '../../data/locations.js';

export class GameInterface {
    constructor(character) {
        if (!character) {
            console.error('Character is required for GameInterface');
            return;
        }
        console.log('Initializing GameInterface with character:', character);
        this.character = character;
    }

    createTemplate() {
        console.log('Creating game interface template');
        return `
            <div class="game-container">
                <div class="top-panel">
                    <div class="character-stats">
                        <div class="stat-bar health">
                            <div class="bar-fill" style="width: 100%"></div>
                            <span class="bar-text">–ó–¥–æ—Ä–æ–≤—å–µ: ${this.character.stats.health}/${this.character.stats.health}</span>
                        </div>
                        <div class="stat-bar sanity">
                            <div class="bar-fill" style="width: 100%"></div>
                            <span class="bar-text">–†–∞—Å—Å—É–¥–æ–∫: ${this.character.stats.sanity}/${this.character.stats.sanity}</span>
                        </div>
                    </div>
                    <div class="location-info">
                        <h2>–ê—Ä–∫—Ö—ç–º</h2>
                        <div class="threat-level">–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: –ù–∏–∑–∫–∏–π</div>
                    </div>
                </div>
                <div class="game-area">
                    <div class="message">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Ä–∫—Ö—ç–º, ${this.character.name}!</div>
                </div>
                <div class="bottom-section">
                    <div class="chat-players-container">
                        <div class="chat-area">
                            <div class="chat-messages">
                                <div class="message">–°–∏—Å—Ç–µ–º–∞: –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å</div>
                                <div class="message">–°–∏—Å—Ç–µ–º–∞: ${this.character.name} –ø—Ä–∏–±—ã–≤–∞–µ—Ç –≤ –ê—Ä–∫—Ö—ç–º</div>
                            </div>
                        </div>
                    </div>
                    <div class="navigation-panel">
                        <div class="nav-buttons">
                            <button class="nav-btn">–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å</button>
                            <button class="nav-btn">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</button>
                            <button class="nav-btn">–ö–∞—Ä—Ç–∞</button>
                        </div>
                        <div class="action-buttons">
                            <button class="action-btn">üîç</button>
                            <button class="action-btn">‚öîÔ∏è</button>
                            <button class="action-btn">üìñ</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    mount(container) {
        if (!container) {
            console.error('Container not found for mounting game interface');
            return;
        }

        console.log('Mounting game interface to container:', container);
        
        try {
            // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
            const template = this.createTemplate();
            
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            container.innerHTML = template;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.addEventListeners(container);
            
            console.log('Game interface mounted successfully');
        } catch (error) {
            console.error('Error mounting game interface:', error);
        }
    }

    addEventListeners(container) {
        console.log('Adding event listeners to game interface');
        
        const navButtons = container.querySelectorAll('.nav-btn');
        const actionButtons = container.querySelectorAll('.action-btn');

        navButtons.forEach(button => {
            button.addEventListener('click', () => {
                console.log('Navigation button clicked:', button.textContent);
                this.handleNavigation(button.textContent);
            });
        });

        actionButtons.forEach(button => {
            button.addEventListener('click', () => {
                console.log('Action button clicked:', button.textContent);
                this.handleAction(button.textContent);
            });
        });
    }

    handleNavigation(action) {
        switch(action) {
            case '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å':
                this.addMessage('–ò—Å—Å–ª–µ–¥—É–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é...');
                break;
            case '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å':
                this.addMessage('–û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...');
                break;
            case '–ö–∞—Ä—Ç–∞':
                this.addMessage('–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É...');
                break;
        }
    }

    handleAction(action) {
        switch(action) {
            case 'üîç':
                this.addMessage('–û—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏...');
                break;
            case '‚öîÔ∏è':
                this.addMessage('–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –±–æ—é...');
                break;
            case 'üìñ':
                this.addMessage('–û—Ç–∫—Ä—ã–≤–∞–µ–º –∂—É—Ä–Ω–∞–ª –∑–∞–¥–∞–Ω–∏–π...');
                break;
        }
    }

    addMessage(text) {
        const chatMessages = document.querySelector('.chat-messages');
        if (chatMessages) {
            const message = document.createElement('div');
            message.className = 'message';
            message.textContent = text;
            chatMessages.appendChild(message);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    initialize() {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = cardTemplates.gameInterfaceTemplate(this.character, this.currentLocation);
        this.element = tempDiv.firstElementChild;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.initializeEventListeners();
    }

    initializeEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        const actionButtons = this.element.querySelectorAll('.action-btn');
        actionButtons.forEach(button => {
            button.addEventListener('click', () => {
                const action = button.querySelector('span').textContent;
                this.handleAction(action);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–æ–∫–∞—Ü–∏–π
        const locationButtons = this.element.querySelectorAll('.location-btn');
        locationButtons.forEach(button => {
            button.addEventListener('click', () => {
                const locationId = button.dataset.location;
                this.changeLocation(locationId);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ NPC
        const npcButtons = this.element.querySelectorAll('.npc-btn');
        npcButtons.forEach(button => {
            button.addEventListener('click', () => {
                const npc = button.querySelector('span').textContent;
                this.handleNPCInteraction(npc);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        const tabButtons = this.element.querySelectorAll('.tab-btn');
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                this.switchTab(button);
            });
        });
    }

    changeLocation(locationId) {
        const newLocation = locations[locationId];
        if (!newLocation) {
            console.error(`–õ–æ–∫–∞—Ü–∏—è ${locationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const locationView = this.element.querySelector('.location-view');
        if (locationView) {
            locationView.classList.add('changing');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
        this.currentLocation = newLocation;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateLocationInterface();

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        this.addMessage(`–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ª–æ–∫–∞—Ü–∏—é: ${newLocation.name}`);
    }

    updateLocationInterface() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
        const gameScene = this.element.querySelector('.game-scene');
        gameScene.innerHTML = cardTemplates.locationTemplate(this.currentLocation);

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        const locationName = this.element.querySelector('.location-name span');
        locationName.textContent = this.currentLocation.name;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        const locationList = this.element.querySelector('.location-list');
        locationList.innerHTML = `
            <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏</h3>
            ${this.currentLocation.connectedTo.map(locationId => `
                <button class="location-btn" data-location="${locationId}">
                    <div class="icon arrow-icon"></div>
                    <span>${locations[locationId].name}</span>
                </button>
            `).join('')}
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        this.initializeEventListeners();
    }

    handleNPCInteraction(npc) {
        this.addMessage(`–ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º: ${npc}`);
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å NPC
    }

    switchTab(selectedTab) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        const tabs = this.element.querySelectorAll('.tab-btn');
        tabs.forEach(tab => tab.classList.remove('active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
        selectedTab.classList.add('active');
    }

    updateHealth(current, max) {
        const healthBar = this.element.querySelector('.health-bar .bar-fill');
        const healthText = this.element.querySelector('.health-bar .bar-text');
        
        healthBar.style.width = `${(current / max) * 100}%`;
        healthText.textContent = `–•–ü: ${current}/${max}`;
    }

    updateSanity(current, max) {
        const sanityBar = this.element.querySelector('.energy-bar .bar-fill');
        const sanityText = this.element.querySelector('.energy-bar .bar-text');
        
        sanityBar.style.width = `${(current / max) * 100}%`;
        sanityText.textContent = `–†–∞—Å—Å—É–¥–æ–∫: ${current}/${max}`;
    }

    unmount() {
        if (this.element && this.element.parentNode) {
            this.element.parentNode.removeChild(this.element);
        }
    }
} 