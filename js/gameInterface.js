// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
class GameCommand {
    constructor(controller) {
        this.controller = controller;
    }
    
    execute() {
        if (gameState.actionsLeft < 1) {
            this.controller.showMessage("–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π!");
            return false;
        }
        
        const result = this.performAction();
        if (result !== false) {
            gameState.actionsLeft--;
            this.controller.updateActionButtons();
        }
        return result;
    }

    performAction() {
        throw new Error('–ú–µ—Ç–æ–¥ performAction –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    }
}

// –ö–æ–º–∞–Ω–¥–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
class InvestigateCommand extends GameCommand {
    performAction() {
        const currentDistrict = gameState.districts[gameState.currentLocation];
        if (currentDistrict.clues > 0) {
            currentDistrict.clues--;
            this.controller.showMessage("–ù–∞–π–¥–µ–Ω–∞ —É–ª–∏–∫–∞!");
            this.controller.updateDistrictView();
            return true;
        } else {
            this.controller.showMessage("–ó–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ—Ç —É–ª–∏–∫.");
            return false;
        }
    }
}

// –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ –±–æ—è
class CombatCommand extends GameCommand {
    performAction() {
        document.querySelector('.combat-overlay').style.display = 'grid';
        new CombatSystem();
        return true;
    }
}

// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–¥—ã—Ö–∞
class RestCommand extends GameCommand {
    performAction() {
        const character = gameState.players[0];
        character.health = Math.min(character.health + 1, character.maxHealth);
        this.controller.showMessage("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 1 –∑–¥–æ—Ä–æ–≤—å–µ");
        this.controller.updateCharacterStatus();
        return true;
    }
}

// –ò–º–ø–æ—Ä—Ç—ã
import { loadCharacters } from './modules/cards/character.js';
import { loadScenarios } from './modules/cards/scenario.js';
import { scenarios } from './data/scenarios.js';
import { characters } from './data/characters.js';
import { gameState } from './data/gameState.js';

class GameController {
    constructor() {
        this.commands = {
            'investigate': new InvestigateCommand(this),
            'combat': new CombatCommand(this),
            'rest': new RestCommand(this)
        };
        this.bindEvents();
        this.setupActionButtons();
    }

    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.handleAction(e.target.dataset.action));
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
        document.getElementById('endTurn')?.addEventListener('click', () => this.endTurn());
    }

    setupActionButtons() {
        const actionButtons = {
            investigate: {
                icon: 'üîç',
                action: () => this.investigate()
            },
            combat: {
                icon: '‚öî',
                action: () => this.startCombat()
            },
            rest: {
                icon: 'üïØ',
                action: () => this.rest()
            }
        };

        const container = document.querySelector('.action-buttons');
        if (container) {
            container.innerHTML = '';
            Object.entries(actionButtons).forEach(([key, data]) => {
                const button = document.createElement('button');
                button.className = 'action-btn';
                button.dataset.action = key;
                button.innerHTML = data.icon;
                button.addEventListener('click', data.action);
                container.appendChild(button);
            });
        }
    }

    handleAction(action) {
        const command = this.commands[action];
        if (command) {
            command.execute();
        } else {
            console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
        }
    }

    investigate() {
        const currentDistrict = gameState.districts[gameState.currentLocation];
        if (currentDistrict.clues > 0 && gameState.actionsLeft > 0) {
            currentDistrict.clues--;
            gameState.actionsLeft--;
            showMessage("–ù–∞–π–¥–µ–Ω–∞ —É–ª–∏–∫–∞!");
            updateGameInterface();
        } else if (gameState.actionsLeft === 0) {
            showMessage("–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π!");
        } else {
            showMessage("–ó–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ—Ç —É–ª–∏–∫.");
        }
    }

    startCombat() {
        if (gameState.actionsLeft > 0) {
            document.querySelector('.combat-overlay').style.display = 'grid';
            new CombatSystem();
            gameState.actionsLeft--;
            updateGameInterface();
        } else {
            showMessage("–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π!");
        }
    }

    rest() {
        if (gameState.actionsLeft > 0) {
            const character = gameState.players[0];
            const maxHealth = character.stats.health;
            if (character.health < maxHealth) {
                character.health = Math.min(character.health + 1, maxHealth);
                gameState.actionsLeft--;
                showMessage("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 1 –∑–¥–æ—Ä–æ–≤—å–µ");
                updateGameInterface();
            } else {
                showMessage("–ó–¥–æ—Ä–æ–≤—å–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ");
            }
        } else {
            showMessage("–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π!");
        }
    }

    endTurn() {
        gameState.actionsLeft = 3;
        updateGameInterface();
        showMessage("–ù–æ–≤—ã–π —Ö–æ–¥ –Ω–∞—á–∞–ª—Å—è");
    }

    updateDistrictView() {
        const district = gameState.districts[gameState.currentLocation];
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        document.querySelector('.location-title h2').textContent = district.name.toUpperCase();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ª–∏–∫
        const clueElements = document.querySelectorAll('.clue');
        clueElements.forEach(el => {
            if (district.clues === 0) {
                el.style.display = 'none';
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
        if (district.hasAnomaly) {
            document.querySelector('.portal-anomaly').style.display = 'block';
        } else {
            document.querySelector('.portal-anomaly').style.display = 'none';
        }
    }

    updateCharacterStatus() {
        const character = gameState.players[0];
        document.querySelector('.sanity-tracker .value').textContent = 
            `${character.health}/${character.maxHealth}`;
    }

    showMessage(text) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const message = document.createElement('div');
        message.className = 'game-message';
        message.textContent = text;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(message);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            message.remove();
        }, 3000);
    }
}

// –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    .game-message {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: #1a1426;
        color: #f2d492;
        padding: 15px 30px;
        border: 2px solid #634d32;
        border-radius: 8px;
        animation: messageAppear 0.3s ease-out;
        z-index: 1000;
    }

    @keyframes messageAppear {
        from { 
            opacity: 0;
            transform: translate(-50%, -20px);
        }
        to { 
            opacity: 1;
            transform: translate(-50%, 0);
        }
    }
`;
document.head.appendChild(style);

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
export function initializeGame() {
    if (!gameState.selectedScenario || !gameState.selectedCharacter) {
        console.error('–ù–µ –≤—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂');
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    gameState.currentLocation = gameState.selectedScenario.startArea;
    gameState.actionsLeft = 3;
    gameState.players = [{
        ...gameState.selectedCharacter,
        location: gameState.selectedScenario.startArea,
        isLeader: true,
        health: gameState.selectedCharacter.stats.health,
        sanity: gameState.selectedCharacter.stats.sanity
    }];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–π–æ–Ω—ã
    gameState.districts = {};
    gameState.selectedScenario.districts.forEach(district => {
        gameState.districts[district.id] = {
            ...district,
            despair: district.initialDespair,
            clues: district.initialClues
        };
    });

    console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', gameState);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
export function updateGameInterface() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    const currentDistrict = gameState.districts[gameState.currentLocation];
    const locationInfo = document.querySelector('.location-info');
    if (locationInfo && currentDistrict) {
        locationInfo.querySelector('h2').textContent = currentDistrict.name.toUpperCase();
        locationInfo.querySelector('.threat-level').textContent = 
            `–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: ${calculateThreatLevel(currentDistrict.despair)}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const character = gameState.players[0];
    const characterStats = document.querySelector('.character-stats');
    if (characterStats && character) {
        const healthBar = characterStats.querySelector('.health .bar-fill');
        const sanityBar = characterStats.querySelector('.sanity .bar-fill');
        
        const healthPercent = (character.health / character.stats.health) * 100;
        const sanityPercent = (character.sanity / character.stats.sanity) * 100;
        
        healthBar.style.width = `${healthPercent}%`;
        sanityBar.style.width = `${sanityPercent}%`;
        
        healthBar.parentElement.querySelector('.bar-text').textContent = 
            `–ó–¥–æ—Ä–æ–≤—å–µ: ${character.health}`;
        sanityBar.parentElement.querySelector('.bar-text').textContent = 
            `–†–∞—Å—Å—É–¥–æ–∫: ${character.sanity}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏
    updateAvailablePaths();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É—Ç–µ–π
function updateAvailablePaths() {
    const currentDistrict = gameState.districts[gameState.currentLocation];
    const navButtons = document.querySelector('.nav-buttons');
    
    if (navButtons && currentDistrict) {
        navButtons.innerHTML = '';
        currentDistrict.connectedTo.forEach(locationId => {
            const district = gameState.districts[locationId];
            const button = document.createElement('button');
            button.className = 'nav-btn';
            button.textContent = `‚Üí ${district.name} (1 –¥–µ–π—Å—Ç–≤–∏–µ)`;
            button.addEventListener('click', () => moveToLocation(locationId));
            navButtons.appendChild(button);
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
function moveToLocation(locationId) {
    if (gameState.actionsLeft > 0) {
        gameState.currentLocation = locationId;
        gameState.actionsLeft--;
        updateGameInterface();
    } else {
        showMessage("–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π!");
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã
function calculateThreatLevel(despair) {
    if (despair >= 5) return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π";
    if (despair >= 3) return "–í—ã—Å–æ–∫–∏–π";
    if (despair >= 1) return "–°—Ä–µ–¥–Ω–∏–π";
    return "–ù–∏–∑–∫–∏–π";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
export function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
        console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenId}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing game interface...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const gameController = new GameController();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    showScreen('scenarioSelect');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
    document.addEventListener('scenarioSelected', (event) => {
        const { scenarioId } = event.detail;
        console.log(`–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenarioId}`);
        gameState.selectedScenario = scenarios[scenarioId];
        showScreen('characterSelect');
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
        loadCharacters();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    document.addEventListener('characterSelected', (event) => {
        const { characterId } = event.detail;
        console.log(`–í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: ${characterId}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        gameState.selectedCharacter = characters[characterId];
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        const startGameBtn = document.getElementById('startGameBtn');
        if (startGameBtn) {
            startGameBtn.style.display = 'inline-block';
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    document.addEventListener('itemSelected', (event) => {
        const { characterId, itemName } = event.detail;
        console.log(`–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç ${itemName} –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${characterId}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    const startGameBtn = document.getElementById('startGameBtn');
    if (startGameBtn) {
        startGameBtn.addEventListener('click', () => {
            if (gameState.selectedCharacter && gameState.selectedScenario) {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
                initializeGame();
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
                showScreen('gameBoard');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                updateGameInterface();
            } else {
                showMessage("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
            }
        });
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const gameController = new GameController();

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
class GameInterface {
    constructor(character) {
        this.character = character;
        this.currentHealth = character.stats.health;
        this.currentSanity = character.stats.sanity;
        this.currentLocation = 'square';
        this.logHistory = [];
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ä–∞—Å—Å—É–¥–∫–∞
    updateBars(health, sanity) {
        const healthBar = document.querySelector('.health .bar-fill');
        const sanityBar = document.querySelector('.sanity .bar-fill');
        const healthText = document.querySelector('.health .bar-text');
        const sanityText = document.querySelector('.sanity .bar-text');

        if (health < this.currentHealth) {
            healthBar.classList.add('decreasing');
            setTimeout(() => healthBar.classList.remove('decreasing'), 300);
        }
        if (sanity < this.currentSanity) {
            sanityBar.classList.add('decreasing');
            setTimeout(() => sanityBar.classList.remove('decreasing'), 300);
        }

        const healthPercent = (health / this.character.stats.health) * 100;
        const sanityPercent = (sanity / this.character.stats.sanity) * 100;

        healthBar.style.width = `${healthPercent}%`;
        sanityBar.style.width = `${sanityPercent}%`;

        healthText.textContent = `${health}/${this.character.stats.health}`;
        sanityText.textContent = `${sanity}/${this.character.stats.sanity}`;

        this.currentHealth = health;
        this.currentSanity = sanity;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª
    addLogEntry(text, type = 'system') {
        const logContent = document.querySelector('.log-content');
        const entry = document.createElement('div');
        entry.className = `log-entry ${type}`;
        entry.textContent = text;
        
        logContent.appendChild(entry);
        logContent.scrollTop = logContent.scrollHeight;

        this.logHistory.push({ text, type });
        if (this.logHistory.length > 100) {
            this.logHistory.shift();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    handleMovement(location) {
        const locationNames = {
            square: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å',
            outskirts: '–û–∫—Ä–∞–∏–Ω—É',
            alga: '–ó–∞–≤–æ–¥—Å–∫–æ–π –ê–ª—å–≥–∞',
            paiki: '–ü–∞–π–∫–∏',
            alta: '–ê–ª—å—Ç—É',
            krichet: '–ö—Ä–∏—á–µ—Ç –†–∏–º–º—ã'
        };

        this.addLogEntry(`[–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ] –í—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ ${locationNames[location]}...`, 'movement');
        setTimeout(() => {
            this.currentLocation = location;
            this.addLogEntry(`[–°–∏—Å—Ç–µ–º–∞] –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: ${locationNames[location]}`);
        }, 1000);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initEventListeners() {
        document.querySelectorAll('.location-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const location = btn.dataset.location;
                this.handleMovement(location);
            });
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
export function initializeGameInterface(character) {
    const gameInterface = new GameInterface(character);
    gameInterface.initEventListeners();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
    gameInterface.addLogEntry('[–°–∏—Å—Ç–µ–º–∞] –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!');
    gameInterface.addLogEntry(`[–°–∏—Å—Ç–µ–º–∞] –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${character.name}`);
    
    return gameInterface;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
export function updateGameInterface(gameInterface, updates) {
    if (updates.health !== undefined || updates.sanity !== undefined) {
        gameInterface.updateBars(
            updates.health ?? gameInterface.currentHealth,
            updates.sanity ?? gameInterface.currentSanity
        );
    }

    if (updates.logEntry) {
        gameInterface.addLogEntry(updates.logEntry.text, updates.logEntry.type);
    }
} 